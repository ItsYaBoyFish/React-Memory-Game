{"version":3,"sources":["components/MemorySquare.js","components/StatusPanel.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["MemorySquare","state","id","props","styles","coloredSquare","marginTop","height","width","background","this","squareColor","borderRadius","container","textAlign","style","onClick","squareClicked","Component","marginRight","h3","color","marginLeft","fontSize","instructions","message","StatusPanel","score","topScore","fontWeight","GameContainer","evaluatePosition","Math","floor","random","resetGame","squaresArr","window","location","reload","map","square","position","squares","hex","clicked","parseInt","sessionStorage","getItem","alert","setItem","sort","a","b","setState","css","className","index","key","App","coreCSS","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ff1c88.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass MemorySquare extends Component {\n\n  state = {\n    id: this.props.id\n  }\n\n  render() {\n    const styles = {\n      coloredSquare: {\n        // marginLeft: \"auto\",\n        // marginRight: \"auto\",\n        marginTop: \"7.5px\",\n        height: \"180px\",\n        width: \"180px\",\n        background: this.props.squareColor,\n        borderRadius: \"10px\",\n      },\n      container: {\n        // margin: \"10px\",\n        textAlign: \"center\",\n        height: \"195px\",\n        width: \"195px\",\n        borderRadius: \"10px\"\n      }\n     \n    }\n    return (\n      <div  style={styles.container}>\n        <div style={styles.coloredSquare} onClick={() => {this.props.squareClicked(this.props.id)}}></div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default MemorySquare;\n","import React from 'react'\n\nfunction StatusPanel(props) {\n  return (\n    <div style={styles.container}>\n        <h1 style={{color: \"#fff\", textAlign: \"center\", marginTop: \"7px\"}}>Stats Panel:</h1>\n        <hr style={{color: \"#fff\", marginTop: \"3px\"}}></hr>\n        <h3 style={styles.h3}>Score: {props.score}</h3>\n        <h3 style={styles.h3}>Top Score: {props.topScore}</h3>\n        <hr style={{color: \"#fff\", marginTop: \"10px\"}}></hr>\n        <div style={styles.instructions}>\n          <label style={{fontSize: '25px', color: \"#fff\", fontWeight: 'bold'}}>Instructions:</label>\n          <p style={{fontSize: \"18px\", color: '#e3f6f5', marginTop: '10px'}}>\n            Click on the colored squares but don't forget which ones you have selected. You receive points for clicking on boxes that you have not previously clicked on already!\n          </p>\n        </div>\n        <hr style={{color: \"#fff\", marginTop: \"12px\"}}></hr>\n        {/* <div style={{marginLeft: \"10px\", marginTop: \"10px\"}}>\n          <label style={{fontSize: '25px', color: \"#fff\", fontWeight: 'bold'}}>Difficulty: </label>\n          <select id=\"difficulty\" value={props.difficulty} onChange={() => {props.changeDifficulty()}} style={{marginLeft: '120px', width: \"75px\", height: '30px', fontSize: \"18px\"}}>\n            <option value=\"Easy\">Easy</option>\n            <option value=\"Hard\">Hard</option>\n          </select>\n        </div> */}\n    </div>\n    \n  )\n}\n\n  const styles = {\n    container: {\n      background: \"#393e46\",\n      height: \"350px\",\n      width: \"350px\",\n      borderRadius: \"10px\",\n      marginRight: \"10px\",\n      marginTop: '7.5px'\n    },\n    h3: {\n      color: \"#fff\",\n      marginTop: \"10px\",\n      marginLeft: '10px',\n      fontSize: \"25px\"\n    },\n    instructions: {\n      marginTop: '10px',\n      marginLeft: '10px'\n    },\n    message: {\n      marginTop: \"10px\"\n    }\n  }\n\nexport default StatusPanel;","import React, { Component } from 'react';\nimport MemorySquare from \"./MemorySquare\";\nimport StatusPanel from \"./StatusPanel\"\nimport css from \"../GameContainer.css\"\nclass GameContainer extends Component {\n  // Generates a random number for each\n  evaluatePosition = () => {\n    return Math.floor(Math.random() * 800);\n  }\n\n  resetGame = (squaresArr) => {\n    window.location.reload(false)\n    squaresArr.map(square => {\n      return square.position = this.evaluatePosition();\n    })\n  }\n\n  state = {\n    squares: [\n      {id: 0, hex: \"#5d1451\", position: this.evaluatePosition(), clicked: false},\n      {id: 1, hex: \"#2f416d\", position: this.evaluatePosition(), clicked: false},\n      {id: 2, hex: \"#14868c\", position: this.evaluatePosition(), clicked: false},\n      {id: 3, hex: \"#94ceca\", position: this.evaluatePosition(), clicked: false},\n      {id: 4, hex: \"#1089ff\", position: this.evaluatePosition(), clicked: false},\n      {id: 5, hex: \"#121b74\", position: this.evaluatePosition(), clicked: false},\n      {id: 6, hex: \"#b0deff\", position: this.evaluatePosition(), clicked: false},\n      {id: 7, hex: \"#5ca0d3\", position: this.evaluatePosition(), clicked: false},\n      {id: 8, hex: \"#142d4c\", position: this.evaluatePosition(), clicked: false},\n      {id: 9, hex: \"#00028c\", position: this.evaluatePosition(), clicked: false},\n      {id: 10, hex: \"#a6e3e9\", position: this.evaluatePosition(), clicked: false},\n      {id: 11, hex: \"#cbf1f5\", position: this.evaluatePosition(), clicked: false}\n    ],\n    score: 0,\n    topScore: parseInt(sessionStorage.getItem('topScore')) || 0\n  }\n\n  squareClicked = (id) => {\n    const squares = this.state.squares\n    var score = this.state.score\n    var topScore = this.state.topScore\n    // console.log(squares)\n    if (squares[id].clicked === true) {\n      \n      alert(`Game Over: You Guessed Incorrectly!`)\n\n      // setting the TopScore value to sessionStorage\n      sessionStorage.setItem('topScore', this.state.topScore)\n\n      // Resetting all clicked values to false.\n      this.resetGame()\n\n    } else {\n      // Set that squares clicked state to true.\n      squares[id].clicked = true\n\n      // Increment the score by 1\n      score = score + 1\n\n      // If the score is greater than or equal to score set topScore equal to score.\n      if (score >= topScore) {\n        topScore = score\n      }\n      // Updating the position of the squares to rearange the tiles.\n      squares.map((square => {\n        return square.position = this.evaluatePosition();\n        })).sort(((a,b) => {return a.position - b.position}))\n\n        // Setting the updated squares array back to state, along with the score and message.\n      this.setState({\n        squares,\n        score,\n        topScore: topScore\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div style={css} className=\"container\">\n        <StatusPanel score={this.state.score} topScore={this.state.topScore}/>\n        <div className=\"squareContainer\">\n          {this.state.squares.sort((a, b) => {return a.position - b.position}).map((square, index) => (\n            <MemorySquare key={index} id={index} squareClicked={this.squareClicked} position={square.position} squareColor={square.hex}/>\n          ))}\n        </div>\n      </div>\n    )\n  }\n};\n\n\n\nexport default GameContainer;\n","import React from 'react';\nimport coreCSS from \"../src/app.css\";\nimport GameContainer from \"./components/GameContainer\"\n\nfunction App() {\n  return (\n    <div style={coreCSS}>\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}